// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/gov/v1beta1/gov.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VoteOption enumerates the valid vote options for a given governance proposal.
type VoteOption int32

const (
	// VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
	OptionEmpty VoteOption = 0
	// VOTE_OPTION_YES defines a yes vote option.
	OptionYes VoteOption = 1
	// VOTE_OPTION_ABSTAIN defines an abstain vote option.
	OptionAbstain VoteOption = 2
	// VOTE_OPTION_NO defines a no vote option.
	OptionNo VoteOption = 3
	// VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
	OptionNoWithVeto VoteOption = 4
)

var VoteOption_name = map[int32]string{
	0: "VOTE_OPTION_UNSPECIFIED",
	1: "VOTE_OPTION_YES",
	2: "VOTE_OPTION_ABSTAIN",
	3: "VOTE_OPTION_NO",
	4: "VOTE_OPTION_NO_WITH_VETO",
}

var VoteOption_value = map[string]int32{
	"VOTE_OPTION_UNSPECIFIED":  0,
	"VOTE_OPTION_YES":          1,
	"VOTE_OPTION_ABSTAIN":      2,
	"VOTE_OPTION_NO":           3,
	"VOTE_OPTION_NO_WITH_VETO": 4,
}

func (x VoteOption) String() string {
	return proto.EnumName(VoteOption_name, int32(x))
}

func (VoteOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6e82113c1a9a4b7c, []int{0}
}

// ProposalStatus enumerates the valid statuses of a proposal.
type ProposalStatus int32

const (
	// PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
	StatusNil ProposalStatus = 0
	// PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
	// period.
	StatusDepositPeriod ProposalStatus = 1
	// PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
	// period.
	StatusVotingPeriod ProposalStatus = 2
	// PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
	// passed.
	StatusPassed ProposalStatus = 3
	// PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
	// been rejected.
	StatusRejected ProposalStatus = 4
	// PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
	// failed.
	StatusFailed ProposalStatus = 5
)

var ProposalStatus_name = map[int32]string{
	0: "PROPOSAL_STATUS_UNSPECIFIED",
	1: "PROPOSAL_STATUS_DEPOSIT_PERIOD",
	2: "PROPOSAL_STATUS_VOTING_PERIOD",
	3: "PROPOSAL_STATUS_PASSED",
	4: "PROPOSAL_STATUS_REJECTED",
	5: "PROPOSAL_STATUS_FAILED",
}

var ProposalStatus_value = map[string]int32{
	"PROPOSAL_STATUS_UNSPECIFIED":    0,
	"PROPOSAL_STATUS_DEPOSIT_PERIOD": 1,
	"PROPOSAL_STATUS_VOTING_PERIOD":  2,
	"PROPOSAL_STATUS_PASSED":         3,
	"PROPOSAL_STATUS_REJECTED":       4,
	"PROPOSAL_STATUS_FAILED":         5,
}

func (x ProposalStatus) String() string {
	return proto.EnumName(ProposalStatus_name, int32(x))
}

func (ProposalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6e82113c1a9a4b7c, []int{1}
}

// WeightedVoteOption defines a unit of vote for vote split.
//
// Since: cosmos-sdk 0.43
type WeightedVoteOption struct {
	Option VoteOption                             `protobuf:"varint,1,opt,name=option,proto3,enum=cosmos.gov.v1beta1.VoteOption" json:"option,omitempty"`
	Weight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight" yaml:"weight"`
}

func (m *WeightedVoteOption) Reset()      { *m = WeightedVoteOption{} }
func (*WeightedVoteOption) ProtoMessage() {}
func (*WeightedVoteOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82113c1a9a4b7c, []int{0}
}
func (m *WeightedVoteOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeightedVoteOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeightedVoteOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeightedVoteOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedVoteOption.Merge(m, src)
}
func (m *WeightedVoteOption) XXX_Size() int {
	return m.Size()
}
func (m *WeightedVoteOption) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedVoteOption.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedVoteOption proto.InternalMessageInfo

// TextProposal defines a standard text proposal whose changes need to be
// manually updated in case of approval.
type TextProposal struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *TextProposal) Reset()      { *m = TextProposal{} }
func (*TextProposal) ProtoMessage() {}
func (*TextProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82113c1a9a4b7c, []int{1}
}
func (m *TextProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextProposal.Merge(m, src)
}
func (m *TextProposal) XXX_Size() int {
	return m.Size()
}
func (m *TextProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_TextProposal.DiscardUnknown(m)
}

var xxx_messageInfo_TextProposal proto.InternalMessageInfo

// Deposit defines an amount deposited by an account address to an active
// proposal.
type Deposit struct {
	ProposalId uint64                                   `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty" yaml:"proposal_id"`
	Depositor  string                                   `protobuf:"bytes,2,opt,name=depositor,proto3" json:"depositor,omitempty"`
	Amount     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *Deposit) Reset()      { *m = Deposit{} }
func (*Deposit) ProtoMessage() {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82113c1a9a4b7c, []int{2}
}
func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return m.Size()
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

// Proposal defines the core field members of a governance proposal.
type Proposal struct {
	ProposalId       uint64                                   `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"id" yaml:"id"`
	Content          *types1.Any                              `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Status           ProposalStatus                           `protobuf:"varint,3,opt,name=status,proto3,enum=cosmos.gov.v1beta1.ProposalStatus" json:"status,omitempty" yaml:"proposal_status"`
	FinalTallyResult TallyResult                              `protobuf:"bytes,4,opt,name=final_tally_result,json=finalTallyResult,proto3" json:"final_tally_result" yaml:"final_tally_result"`
	SubmitTime       time.Time                                `protobuf:"bytes,5,opt,name=submit_time,json=submitTime,proto3,stdtime" json:"submit_time" yaml:"submit_time"`
	DepositEndTime   time.Time                                `protobuf:"bytes,6,opt,name=deposit_end_time,json=depositEndTime,proto3,stdtime" json:"deposit_end_time" yaml:"deposit_end_time"`
	TotalDeposit     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=total_deposit,json=totalDeposit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_deposit" yaml:"total_deposit"`
	VotingStartTime  time.Time                                `protobuf:"bytes,8,opt,name=voting_start_time,json=votingStartTime,proto3,stdtime" json:"voting_start_time" yaml:"voting_start_time"`
	VotingEndTime    time.Time                                `protobuf:"bytes,9,opt,name=voting_end_time,json=votingEndTime,proto3,stdtime" json:"voting_end_time" yaml:"voting_end_time"`
	IsExpedited      bool                                     `protobuf:"varint,10,opt,name=is_expedited,json=isExpedited,proto3" json:"is_expedited,omitempty"`
}

func (m *Proposal) Reset()      { *m = Proposal{} }
func (*Proposal) ProtoMessage() {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82113c1a9a4b7c, []int{3}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

// TallyResult defines a standard tally for a governance proposal.
type TallyResult struct {
	Yes        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=yes,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"yes"`
	Abstain    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=abstain,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"abstain"`
	No         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=no,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"no"`
	NoWithVeto github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=no_with_veto,json=noWithVeto,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"no_with_veto" yaml:"no_with_veto"`
}

func (m *TallyResult) Reset()      { *m = TallyResult{} }
func (*TallyResult) ProtoMessage() {}
func (*TallyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82113c1a9a4b7c, []int{4}
}
func (m *TallyResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TallyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TallyResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TallyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TallyResult.Merge(m, src)
}
func (m *TallyResult) XXX_Size() int {
	return m.Size()
}
func (m *TallyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TallyResult.DiscardUnknown(m)
}

var xxx_messageInfo_TallyResult proto.InternalMessageInfo

// Vote defines a vote on a governance proposal.
// A Vote consists of a proposal ID, the voter, and the vote option.
type Vote struct {
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty" yaml:"proposal_id"`
	Voter      string `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
	// Deprecated: Prefer to use `options` instead. This field is set in queries
	// if and only if `len(options) == 1` and that option has weight 1. In all
	// other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
	Option VoteOption `protobuf:"varint,3,opt,name=option,proto3,enum=cosmos.gov.v1beta1.VoteOption" json:"option,omitempty"` // Deprecated: Do not use.
	// Since: cosmos-sdk 0.43
	Options []WeightedVoteOption `protobuf:"bytes,4,rep,name=options,proto3" json:"options"`
}

func (m *Vote) Reset()      { *m = Vote{} }
func (*Vote) ProtoMessage() {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82113c1a9a4b7c, []int{5}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

// DepositParams defines the params for deposits on governance proposals.
type DepositParams struct {
	//  Minimum deposit for a proposal to enter voting period.
	MinDeposit github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=min_deposit,json=minDeposit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"min_deposit,omitempty" yaml:"min_deposit"`
	//  Maximum period for Atom holders to deposit on a proposal. Initial value: 2
	//  months.
	MaxDepositPeriod time.Duration `protobuf:"bytes,2,opt,name=max_deposit_period,json=maxDepositPeriod,proto3,stdduration" json:"max_deposit_period,omitempty" yaml:"max_deposit_period"`
	//  Minimum expedited deposit for a proposal to enter voting period.
	MinExpeditedDeposit github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=min_expedited_deposit,json=minExpeditedDeposit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"min_expedited_deposit,omitempty" yaml:"min_expedited_deposit"`
	//  The ratio representing the proportion of the deposit value that must be paid at proposal submission.
	MinInitialDepositRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=min_initial_deposit_ratio,json=minInitialDepositRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_initial_deposit_ratio,omitempty"`
}

func (m *DepositParams) Reset()      { *m = DepositParams{} }
func (*DepositParams) ProtoMessage() {}
func (*DepositParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82113c1a9a4b7c, []int{6}
}
func (m *DepositParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositParams.Merge(m, src)
}
func (m *DepositParams) XXX_Size() int {
	return m.Size()
}
func (m *DepositParams) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositParams.DiscardUnknown(m)
}

var xxx_messageInfo_DepositParams proto.InternalMessageInfo

// VotingParams defines the params for voting on governance proposals.
type VotingParams struct {
	// voting_period defines the length of the voting period.
	VotingPeriod time.Duration `protobuf:"bytes,1,opt,name=voting_period,json=votingPeriod,proto3,stdduration" json:"voting_period,omitempty" yaml:"voting_period"`
	// proposal_voting_periods defines custom voting periods for proposal types.
	ProposalVotingPeriods []ProposalVotingPeriod `protobuf:"bytes,2,rep,name=proposal_voting_periods,json=proposalVotingPeriods,proto3" json:"proposal_voting_periods"`
	// Length of the expedited voting period.
	ExpeditedVotingPeriod time.Duration `protobuf:"bytes,3,opt,name=expedited_voting_period,json=expeditedVotingPeriod,proto3,stdduration" json:"expedited_voting_period,omitempty" yaml:"expedited_voting_period"`
}

func (m *VotingParams) Reset()      { *m = VotingParams{} }
func (*VotingParams) ProtoMessage() {}
func (*VotingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82113c1a9a4b7c, []int{7}
}
func (m *VotingParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VotingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VotingParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VotingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotingParams.Merge(m, src)
}
func (m *VotingParams) XXX_Size() int {
	return m.Size()
}
func (m *VotingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_VotingParams.DiscardUnknown(m)
}

var xxx_messageInfo_VotingParams proto.InternalMessageInfo

// TallyParams defines the params for tallying votes on governance proposals.
type TallyParams struct {
	//  Minimum percentage of total stake needed to vote for a result to be
	//  considered valid.
	Quorum github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=quorum,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quorum,omitempty"`
	//  Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
	Threshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=threshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"threshold,omitempty"`
	//  Minimum value of Veto votes to Total votes ratio for proposal to be
	//  vetoed. Default value: 1/3.
	VetoThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=veto_threshold,json=vetoThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"veto_threshold,omitempty" yaml:"veto_threshold"`
	//  Minimum proportion of Yes votes for an expedited proposal to pass. Default value: 0.67.
	ExpeditedThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=expedited_threshold,json=expeditedThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"expedited_threshold,omitempty"`
	//  Minimum proportion of Yes votes for an expedited proposal to reach quorum. Default value: 0.67.
	ExpeditedQuorum github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=expedited_quorum,json=expeditedQuorum,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"expedited_quorum,omitempty"`
}

func (m *TallyParams) Reset()      { *m = TallyParams{} }
func (*TallyParams) ProtoMessage() {}
func (*TallyParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82113c1a9a4b7c, []int{8}
}
func (m *TallyParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TallyParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TallyParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TallyParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TallyParams.Merge(m, src)
}
func (m *TallyParams) XXX_Size() int {
	return m.Size()
}
func (m *TallyParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TallyParams.DiscardUnknown(m)
}

var xxx_messageInfo_TallyParams proto.InternalMessageInfo

// ProposalVotingPeriod defines custom voting periods for a unique governance
// proposal type.
type ProposalVotingPeriod struct {
	ProposalType string        `protobuf:"bytes,1,opt,name=proposal_type,json=proposalType,proto3" json:"proposal_type,omitempty"`
	VotingPeriod time.Duration `protobuf:"bytes,2,opt,name=voting_period,json=votingPeriod,proto3,stdduration" json:"voting_period,omitempty" yaml:"voting_period"`
}

func (m *ProposalVotingPeriod) Reset()      { *m = ProposalVotingPeriod{} }
func (*ProposalVotingPeriod) ProtoMessage() {}
func (*ProposalVotingPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82113c1a9a4b7c, []int{9}
}
func (m *ProposalVotingPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalVotingPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalVotingPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalVotingPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalVotingPeriod.Merge(m, src)
}
func (m *ProposalVotingPeriod) XXX_Size() int {
	return m.Size()
}
func (m *ProposalVotingPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalVotingPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalVotingPeriod proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cosmos.gov.v1beta1.VoteOption", VoteOption_name, VoteOption_value)
	proto.RegisterEnum("cosmos.gov.v1beta1.ProposalStatus", ProposalStatus_name, ProposalStatus_value)
	proto.RegisterType((*WeightedVoteOption)(nil), "cosmos.gov.v1beta1.WeightedVoteOption")
	proto.RegisterType((*TextProposal)(nil), "cosmos.gov.v1beta1.TextProposal")
	proto.RegisterType((*Deposit)(nil), "cosmos.gov.v1beta1.Deposit")
	proto.RegisterType((*Proposal)(nil), "cosmos.gov.v1beta1.Proposal")
	proto.RegisterType((*TallyResult)(nil), "cosmos.gov.v1beta1.TallyResult")
	proto.RegisterType((*Vote)(nil), "cosmos.gov.v1beta1.Vote")
	proto.RegisterType((*DepositParams)(nil), "cosmos.gov.v1beta1.DepositParams")
	proto.RegisterType((*VotingParams)(nil), "cosmos.gov.v1beta1.VotingParams")
	proto.RegisterType((*TallyParams)(nil), "cosmos.gov.v1beta1.TallyParams")
	proto.RegisterType((*ProposalVotingPeriod)(nil), "cosmos.gov.v1beta1.ProposalVotingPeriod")
}

func init() { proto.RegisterFile("cosmos/gov/v1beta1/gov.proto", fileDescriptor_6e82113c1a9a4b7c) }

var fileDescriptor_6e82113c1a9a4b7c = []byte{
<<<<<<< HEAD
	// 1724 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xe7, 0x92, 0xd4, 0x07, 0x87, 0x94, 0x4c, 0x8f, 0x64, 0x89, 0x62, 0x1c, 0x2e, 0xb3, 0x06,
	0x5c, 0x55, 0x75, 0xa8, 0xc6, 0xfd, 0x42, 0xe5, 0xa2, 0xad, 0xd6, 0x5c, 0x37, 0x6c, 0x53, 0x92,
	0x58, 0xd2, 0x34, 0x92, 0xcb, 0x76, 0x45, 0x8e, 0xa9, 0x69, 0xb8, 0x3b, 0x0c, 0x77, 0xa8, 0x88,
	0xe8, 0x25, 0xc7, 0x80, 0x40, 0x0b, 0x9f, 0x0a, 0x03, 0x05, 0x01, 0xa3, 0x45, 0x81, 0xa2, 0xa7,
	0x1c, 0x0a, 0xb4, 0xe7, 0x9e, 0x8c, 0xa2, 0x87, 0xa0, 0xe8, 0x21, 0xe8, 0x81, 0x6e, 0x6c, 0xa0,
	0x09, 0x04, 0xf4, 0xa2, 0xbf, 0xa0, 0xd8, 0x99, 0xd9, 0xe5, 0x2e, 0x49, 0x87, 0xe1, 0xa5, 0x17,
	0x7b, 0xf7, 0x7d, 0xfc, 0xde, 0x7b, 0xbf, 0x79, 0xef, 0xcd, 0x52, 0xe0, 0x7a, 0x93, 0x38, 0x16,
	0x71, 0x0e, 0xdb, 0xe4, 0xec, 0xf0, 0xec, 0x8d, 0x13, 0x44, 0xcd, 0x37, 0xdc, 0xe7, 0x42, 0xb7,
	0x47, 0x28, 0x81, 0x90, 0x6b, 0x0b, 0xae, 0x44, 0x68, 0xb3, 0x39, 0xe1, 0x71, 0x62, 0x3a, 0xc8,
	0x77, 0x69, 0x12, 0x6c, 0x73, 0x9f, 0xec, 0x76, 0x9b, 0xb4, 0x09, 0x7b, 0x3c, 0x74, 0x9f, 0x84,
	0x74, 0x8f, 0x7b, 0x19, 0x5c, 0x21, 0x60, 0xb9, 0x4a, 0x6e, 0x13, 0xd2, 0xee, 0xa0, 0x43, 0xf6,
	0x76, 0xd2, 0x7f, 0x78, 0x48, 0xb1, 0x85, 0x1c, 0x6a, 0x5a, 0x5d, 0xcf, 0x77, 0xda, 0xc0, 0xb4,
	0x07, 0x42, 0x95, 0x9b, 0x56, 0xb5, 0xfa, 0x3d, 0x93, 0x62, 0xe2, 0x25, 0x73, 0xd5, 0xb4, 0xb0,
	0x4d, 0x0e, 0xd9, 0xbf, 0x5c, 0xa4, 0xfc, 0x5e, 0x02, 0xf0, 0x01, 0xc2, 0xed, 0x53, 0x8a, 0x5a,
	0x0d, 0x42, 0x51, 0xa5, 0xeb, 0xda, 0xc3, 0x6f, 0x83, 0x55, 0xc2, 0x9e, 0x32, 0x52, 0x5e, 0xda,
	0xdf, 0xbc, 0x9d, 0x2b, 0xcc, 0xd6, 0x5e, 0x98, 0xd8, 0xeb, 0xc2, 0x1a, 0x3e, 0x00, 0xab, 0xef,
	0x33, 0xb4, 0x4c, 0x34, 0x2f, 0xed, 0x27, 0xd4, 0x1f, 0x3c, 0x1d, 0xcb, 0x91, 0x7f, 0x8d, 0xe5,
	0x9b, 0x6d, 0x4c, 0x4f, 0xfb, 0x27, 0x85, 0x26, 0xb1, 0x44, 0xb9, 0xe2, 0xbf, 0xd7, 0x9d, 0xd6,
	0xbb, 0x87, 0x74, 0xd0, 0x45, 0x4e, 0xa1, 0x88, 0x9a, 0x97, 0x63, 0x79, 0x63, 0x60, 0x5a, 0x9d,
	0x23, 0x85, 0xa3, 0x28, 0xba, 0x80, 0x53, 0x1c, 0x90, 0xaa, 0xa3, 0x73, 0x5a, 0xed, 0x91, 0x2e,
	0x71, 0xcc, 0x0e, 0xdc, 0x06, 0x2b, 0x14, 0xd3, 0x0e, 0x62, 0xf9, 0x25, 0x74, 0xfe, 0x02, 0xf3,
	0x20, 0xd9, 0x42, 0x4e, 0xb3, 0x87, 0x79, 0xee, 0x2c, 0x07, 0x3d, 0x28, 0x3a, 0xfa, 0xda, 0xe7,
	0x4f, 0x64, 0xe9, 0x1f, 0x7f, 0x7a, 0x7d, 0xed, 0x2e, 0xb1, 0x29, 0xb2, 0xe9, 0xf0, 0xb3, 0x8f,
	0x0e, 0x76, 0x03, 0xa9, 0x04, 0x83, 0x28, 0xff, 0x94, 0xc0, 0x5a, 0x11, 0x75, 0x89, 0x83, 0x29,
	0xfc, 0x0e, 0x48, 0x76, 0x85, 0xdc, 0xc0, 0x2d, 0x16, 0x36, 0xae, 0xee, 0x5c, 0x8e, 0x65, 0xc8,
	0x13, 0x0e, 0x28, 0x15, 0x1d, 0x78, 0x6f, 0xa5, 0x16, 0xbc, 0x0e, 0x12, 0x2d, 0x8e, 0x41, 0x7a,
	0x22, 0xa3, 0x89, 0x00, 0x9e, 0x82, 0x55, 0xd3, 0x22, 0x7d, 0x9b, 0x66, 0x62, 0xf9, 0xd8, 0x7e,
	0xf2, 0xf6, 0x9e, 0x47, 0xb4, 0xdb, 0x50, 0x3e, 0xd3, 0x77, 0x09, 0xb6, 0xd5, 0x6f, 0xb9, 0x5c,
	0xfe, 0xf1, 0x99, 0xbc, 0xff, 0x25, 0xb8, 0x74, 0x1d, 0x9c, 0x3f, 0x7c, 0xf6, 0xd1, 0x81, 0xa4,
	0x0b, 0xfc, 0xa3, 0xf5, 0x0f, 0x9f, 0xc8, 0x91, 0xcf, 0x9f, 0xc8, 0x11, 0xe5, 0xcf, 0x6b, 0x60,
	0xdd, 0x27, 0xf2, 0x9b, 0xf3, 0xea, 0xda, 0xba, 0x18, 0xcb, 0x51, 0xdc, 0xba, 0x1c, 0xcb, 0x09,
	0x5e, 0xdd, 0x74, 0x51, 0x77, 0xc0, 0x5a, 0x93, 0x13, 0xc8, 0x4a, 0x4a, 0xde, 0xde, 0x2e, 0xf0,
	0xde, 0x2b, 0x78, 0xbd, 0x57, 0x38, 0xb6, 0x07, 0x6a, 0xf2, 0x6f, 0x13, 0xa6, 0x75, 0xcf, 0x03,
	0x36, 0xc0, 0xaa, 0x43, 0x4d, 0xda, 0x77, 0x32, 0x31, 0xd6, 0x5c, 0xca, 0xbc, 0xe6, 0xf2, 0x12,
	0xac, 0x31, 0x4b, 0x35, 0x7b, 0x39, 0x96, 0x77, 0xa6, 0x98, 0xe6, 0x20, 0x8a, 0x2e, 0xd0, 0x60,
	0x1f, 0xc0, 0x87, 0xd8, 0x36, 0x3b, 0x06, 0x35, 0x3b, 0x9d, 0x81, 0xd1, 0x43, 0x4e, 0xbf, 0x43,
	0x33, 0x71, 0x96, 0x9f, 0x3c, 0x2f, 0x46, 0xdd, 0xb5, 0xd3, 0x99, 0x99, 0x7a, 0xd3, 0x65, 0xf7,
	0x72, 0x2c, 0xef, 0xf1, 0x20, 0xb3, 0x40, 0x0a, 0xa7, 0x33, 0xcd, 0x34, 0x01, 0x4f, 0xf8, 0x33,
	0x90, 0x74, 0xfa, 0x27, 0x16, 0xa6, 0x86, 0x3b, 0xaa, 0x99, 0x15, 0x16, 0x2f, 0x3b, 0xc3, 0x47,
	0xdd, 0x9b, 0x63, 0xf5, 0x86, 0x08, 0x25, 0x3a, 0x27, 0xe0, 0xac, 0x3c, 0x7a, 0x26, 0x4b, 0x3c,
	0x0e, 0xe0, 0x62, 0xd7, 0x0b, 0xda, 0x20, 0x2d, 0x3a, 0xc6, 0x40, 0x76, 0x8b, 0x87, 0x59, 0x5d,
	0x18, 0x66, 0x5f, 0x84, 0xd9, 0xe5, 0x61, 0xa6, 0x11, 0x02, 0xb1, 0x36, 0x85, 0x4e, 0xb3, 0x5b,
	0x2c, 0xde, 0x2f, 0x25, 0xb0, 0x41, 0x09, 0x35, 0x3b, 0x86, 0x50, 0x64, 0xd6, 0x16, 0x35, 0xe7,
	0x4f, 0x45, 0xb0, 0x6d, 0x1e, 0x2c, 0xe4, 0xad, 0x2c, 0xdf, 0xb4, 0x29, 0x06, 0xe0, 0xcd, 0xde,
	0x7b, 0xe0, 0xea, 0x19, 0xa1, 0xd8, 0x6e, 0xbb, 0x47, 0xde, 0x13, 0x3c, 0xaf, 0x2f, 0x24, 0xe0,
	0xab, 0x22, 0xa7, 0x0c, 0xcf, 0x69, 0x06, 0x22, 0xc0, 0xc0, 0x15, 0xae, 0xac, 0xb9, 0x3a, 0x46,
	0xc1, 0xbb, 0x40, 0x88, 0x26, 0x8c, 0x27, 0x16, 0x06, 0xfc, 0x8a, 0x08, 0xb8, 0x13, 0x0a, 0x38,
	0x87, 0xf0, 0x0d, 0xae, 0xf2, 0xf8, 0x7e, 0x0d, 0xa4, 0xb0, 0x63, 0xa0, 0xf3, 0x2e, 0x6a, 0x61,
	0x8a, 0x5a, 0x19, 0x90, 0x97, 0xf6, 0xd7, 0xf5, 0x24, 0x76, 0x34, 0x4f, 0x74, 0x14, 0x77, 0xf7,
	0x96, 0xf2, 0x34, 0x0a, 0x92, 0xc1, 0xd6, 0xfb, 0x21, 0x88, 0x0d, 0x90, 0xc3, 0x77, 0xa0, 0x5a,
	0x58, 0x62, 0xd7, 0x96, 0x6c, 0xaa, 0xbb, 0xae, 0xf0, 0x4d, 0xb0, 0x66, 0x9e, 0x38, 0xd4, 0xc4,
	0x62, 0x5b, 0x2e, 0x8d, 0xe2, 0xb9, 0xc3, 0xef, 0x83, 0xa8, 0x4d, 0xd8, 0x44, 0x2f, 0x0f, 0x12,
	0xb5, 0x09, 0x6c, 0x83, 0x94, 0x4d, 0x8c, 0xf7, 0x31, 0x3d, 0x35, 0xce, 0x10, 0x25, 0x6c, 0x6e,
	0x13, 0xaa, 0xb6, 0x1c, 0xd2, 0xe5, 0x58, 0xde, 0xe2, 0xe4, 0x07, 0xb1, 0x14, 0x1d, 0xd8, 0xe4,
	0x01, 0xa6, 0xa7, 0x0d, 0x44, 0x89, 0xa0, 0xf2, 0xbf, 0x12, 0x88, 0xbb, 0x17, 0x18, 0xfc, 0xde,
	0xbc, 0x05, 0xf8, 0xca, 0xfc, 0xc5, 0x2e, 0x46, 0x33, 0xb0, 0x08, 0xb7, 0xc1, 0xca, 0x19, 0xa1,
	0xc8, 0xdb, 0xec, 0xfc, 0x05, 0x1e, 0xf9, 0xd7, 0x67, 0xec, 0xcb, 0x5c, 0x9f, 0x6a, 0x34, 0x23,
	0xf9, 0x57, 0xe8, 0x4f, 0xc0, 0x1a, 0x7f, 0x72, 0x32, 0x71, 0x36, 0x75, 0x37, 0xe7, 0x39, 0xcf,
	0xde, 0xd9, 0x6a, 0xc2, 0xa5, 0x8a, 0x67, 0xe8, 0x21, 0x1c, 0xad, 0x3f, 0xf6, 0x96, 0xfe, 0xaf,
	0x57, 0xc0, 0x86, 0x98, 0xa7, 0xaa, 0xd9, 0x33, 0x2d, 0x07, 0xfe, 0x46, 0x02, 0x49, 0x0b, 0xdb,
	0xfe, 0x8c, 0x4b, 0x8b, 0x66, 0xdc, 0x70, 0x03, 0x5c, 0x8c, 0xe5, 0x6b, 0x01, 0xaf, 0x5b, 0xc4,
	0xc2, 0x14, 0x59, 0x5d, 0x3a, 0x98, 0x30, 0x16, 0x50, 0x2f, 0x35, 0xfa, 0x3a, 0xb0, 0xb0, 0xed,
	0xcd, 0xfc, 0xaf, 0x24, 0x00, 0x2d, 0xf3, 0xdc, 0x03, 0x32, 0xba, 0xa8, 0x87, 0x49, 0x4b, 0xdc,
	0x36, 0x7b, 0x33, 0x43, 0x58, 0x14, 0x5f, 0x3a, 0xbc, 0x61, 0x2e, 0xc6, 0xf2, 0xf5, 0x59, 0xe7,
	0x50, 0xae, 0x62, 0xcf, 0xcf, 0x5a, 0x29, 0x8f, 0x9f, 0xc9, 0x92, 0x9e, 0xb6, 0xcc, 0x73, 0x8f,
	0x2e, 0x26, 0x86, 0x7f, 0x95, 0x00, 0x2b, 0xdc, 0x1f, 0x53, 0x9f, 0xb8, 0x85, 0x37, 0xb7, 0x23,
	0x72, 0x92, 0xe7, 0xfa, 0x87, 0xd2, 0xba, 0x3e, 0xa1, 0x70, 0xc6, 0x70, 0x39, 0x32, 0xb7, 0x2c,
	0x6c, 0xfb, 0xfb, 0xc3, 0x63, 0xf5, 0x91, 0x04, 0xf6, 0x5c, 0x6c, 0x6c, 0x63, 0x8a, 0x27, 0x1b,
	0xda, 0x60, 0xe4, 0x89, 0x91, 0xbb, 0xbf, 0xdc, 0x37, 0xdb, 0xc5, 0x58, 0xbe, 0xf1, 0x52, 0xc8,
	0x49, 0x6d, 0xfa, 0x8e, 0x85, 0xed, 0x12, 0xb7, 0x11, 0xd9, 0xe8, 0xae, 0x85, 0xf2, 0x38, 0x06,
	0x52, 0x0d, 0xb6, 0x0e, 0x45, 0x5f, 0xfe, 0x02, 0x88, 0xf5, 0xe8, 0x9d, 0xb9, 0xb4, 0xe8, 0xcc,
	0xef, 0x08, 0x7e, 0x77, 0x43, 0x7e, 0x21, 0x5e, 0xb7, 0x43, 0x2b, 0x39, 0x78, 0xd2, 0x29, 0x2e,
	0x13, 0xa7, 0xfc, 0x10, 0xec, 0xfa, 0x03, 0x1f, 0x32, 0x76, 0x32, 0x51, 0x76, 0xcc, 0xfb, 0x5f,
	0xf4, 0xb1, 0xd2, 0x08, 0x40, 0xa9, 0x71, 0x37, 0x2b, 0xfd, 0x5a, 0x77, 0x8e, 0xce, 0x81, 0xbf,
	0x95, 0xc0, 0xee, 0xe4, 0x80, 0xc3, 0xf5, 0xc6, 0x16, 0xd5, 0x5b, 0x11, 0xf5, 0xbe, 0xf6, 0x12,
	0x84, 0x50, 0xe5, 0x39, 0x5e, 0xf9, 0x4b, 0x4c, 0x39, 0x07, 0xd7, 0x7c, 0x6d, 0x30, 0x4b, 0x65,
	0x1c, 0x13, 0xd7, 0x8d, 0x38, 0x99, 0x77, 0xc0, 0xea, 0x7b, 0x7d, 0xd2, 0xeb, 0x5b, 0xec, 0x48,
	0x52, 0xaa, 0xba, 0x74, 0xa7, 0xa4, 0xb9, 0x7f, 0xa0, 0x2d, 0x04, 0x22, 0x6c, 0x82, 0x04, 0x3d,
	0xed, 0x21, 0xe7, 0x94, 0x74, 0xf8, 0x94, 0xa7, 0x96, 0xda, 0xfd, 0x1c, 0x7e, 0xcb, 0x87, 0x08,
	0x44, 0x98, 0xe0, 0xc2, 0xa1, 0x04, 0x36, 0xdd, 0x0b, 0xc1, 0x98, 0x84, 0x8a, 0xb1, 0x50, 0xcd,
	0xa5, 0x43, 0x65, 0xc2, 0x38, 0x21, 0xca, 0xaf, 0x89, 0x66, 0x0b, 0x59, 0x28, 0xfa, 0x86, 0x2b,
	0xa8, 0xfb, 0xc9, 0x7c, 0x20, 0x81, 0xad, 0xc9, 0xa9, 0x4c, 0x32, 0x8a, 0xb3, 0x8c, 0x2a, 0x4b,
	0x67, 0xf4, 0xea, 0x1c, 0xb0, 0x00, 0x0d, 0xd0, 0x57, 0xfb, 0x29, 0x28, 0x7f, 0x91, 0xc0, 0xf6,
	0xbc, 0xde, 0x85, 0x37, 0xc0, 0x86, 0x3f, 0x06, 0x6e, 0x0c, 0xf1, 0x33, 0x2b, 0xe5, 0x09, 0xeb,
	0x83, 0x2e, 0x9a, 0x1d, 0xd4, 0xe8, 0xff, 0x6f, 0x50, 0x0f, 0xfe, 0x23, 0x01, 0x10, 0xf8, 0xc1,
	0x7a, 0x0b, 0xec, 0x36, 0x2a, 0x75, 0xcd, 0xa8, 0x54, 0xeb, 0xa5, 0x4a, 0xd9, 0xb8, 0x5f, 0xae,
	0x55, 0xb5, 0xbb, 0xa5, 0x7b, 0x25, 0xad, 0x98, 0x8e, 0x64, 0xaf, 0x0c, 0x47, 0xf9, 0x24, 0x37,
	0xd4, 0xdc, 0x30, 0x50, 0x01, 0x57, 0x82, 0xd6, 0x6f, 0x6b, 0xb5, 0xb4, 0x94, 0xdd, 0x18, 0x8e,
	0xf2, 0x09, 0x6e, 0xf5, 0x36, 0x72, 0xe0, 0x01, 0xd8, 0x0a, 0xda, 0x1c, 0xab, 0xb5, 0xfa, 0x71,
	0xa9, 0x9c, 0x8e, 0x66, 0xaf, 0x0e, 0x47, 0xf9, 0x0d, 0x6e, 0x77, 0x2c, 0xbe, 0x7d, 0xf2, 0x60,
	0x33, 0x68, 0x5b, 0xae, 0xa4, 0x63, 0xd9, 0xd4, 0x70, 0x94, 0x5f, 0xe7, 0x66, 0x65, 0x02, 0x6f,
	0x83, 0x4c, 0xd8, 0xc2, 0x78, 0x50, 0xaa, 0xbf, 0x69, 0x34, 0xb4, 0x7a, 0x25, 0x1d, 0xcf, 0x6e,
	0x0f, 0x47, 0xf9, 0xb4, 0x67, 0xeb, 0x7d, 0xa8, 0x64, 0xe3, 0x1f, 0xfe, 0x2e, 0x17, 0x39, 0xf8,
	0x7b, 0x14, 0x6c, 0x86, 0x7f, 0x0c, 0xc1, 0x02, 0x78, 0xa5, 0xaa, 0x57, 0xaa, 0x95, 0xda, 0xf1,
	0x5b, 0x46, 0xad, 0x7e, 0x5c, 0xbf, 0x5f, 0x9b, 0x2a, 0x98, 0x95, 0xc2, 0x8d, 0xcb, 0xb8, 0x03,
	0xef, 0x80, 0xdc, 0xb4, 0x7d, 0x51, 0xab, 0x56, 0x6a, 0xa5, 0xba, 0x51, 0xd5, 0xf4, 0x52, 0xa5,
	0x98, 0x96, 0xb2, 0xbb, 0xc3, 0x51, 0x7e, 0x8b, 0xbb, 0x84, 0xef, 0xbd, 0xef, 0x82, 0x57, 0xa7,
	0x9d, 0x1b, 0x95, 0x7a, 0xa9, 0xfc, 0x23, 0xcf, 0x37, 0x9a, 0xdd, 0x19, 0x8e, 0xf2, 0x90, 0xfb,
	0x86, 0xba, 0xe8, 0x16, 0xd8, 0x99, 0x76, 0xad, 0x1e, 0xd7, 0x6a, 0x5a, 0x31, 0x1d, 0xcb, 0xa6,
	0x87, 0xa3, 0x7c, 0x8a, 0xfb, 0x54, 0x4d, 0xc7, 0x41, 0x2d, 0xf8, 0x75, 0x90, 0x99, 0xb6, 0xd6,
	0xb5, 0x1f, 0x6b, 0x77, 0xeb, 0x5a, 0x31, 0x1d, 0xcf, 0xc2, 0xe1, 0x28, 0xbf, 0xc9, 0xed, 0x75,
	0xf4, 0x73, 0xd4, 0xa4, 0x68, 0x2e, 0xfe, 0xbd, 0xe3, 0xd2, 0x5b, 0x5a, 0x31, 0xbd, 0x12, 0xc4,
	0xbf, 0x67, 0xe2, 0x0e, 0x6a, 0x71, 0x3a, 0xd5, 0xf2, 0xd3, 0x4f, 0x73, 0x91, 0x4f, 0x3e, 0xcd,
	0x45, 0x3e, 0x78, 0x9e, 0x8b, 0x3c, 0x7d, 0x9e, 0x93, 0x3e, 0x7e, 0x9e, 0x93, 0xfe, 0xfd, 0x3c,
	0x27, 0x3d, 0x7a, 0x91, 0x8b, 0x7c, 0xfc, 0x22, 0x17, 0xf9, 0xe4, 0x45, 0x2e, 0xf2, 0xce, 0x17,
	0x5f, 0xb3, 0xe7, 0xec, 0x0f, 0x44, 0x6c, 0xf6, 0x4e, 0x56, 0x59, 0x97, 0x7f, 0xe3, 0x7f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x85, 0xee, 0x1c, 0x99, 0x3b, 0x12, 0x00, 0x00,
=======
	// 1747 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xe7, 0x92, 0xd4, 0x07, 0x87, 0x94, 0xbc, 0x1e, 0xc9, 0x12, 0xc5, 0x38, 0x5c, 0x66, 0x0d,
	0xb8, 0xaa, 0xea, 0x50, 0x8d, 0xfb, 0x85, 0xca, 0x45, 0x5b, 0xad, 0xb9, 0x6e, 0xd8, 0xba, 0x22,
	0xbb, 0xa4, 0x65, 0x24, 0x97, 0xed, 0x8a, 0x1c, 0x53, 0xd3, 0x70, 0x77, 0x18, 0xee, 0x50, 0x96,
	0xd0, 0x4b, 0x8e, 0x01, 0x81, 0x16, 0x3e, 0x15, 0x06, 0x0a, 0x02, 0x46, 0x8b, 0x02, 0x45, 0x4f,
	0x39, 0x14, 0x68, 0xcf, 0x3d, 0x19, 0x45, 0x0f, 0x39, 0x14, 0x68, 0xd0, 0x03, 0xdd, 0xd8, 0x40,
	0x13, 0x08, 0xe8, 0x45, 0x7f, 0x41, 0xb1, 0x33, 0xb3, 0xcb, 0x5d, 0x92, 0x0e, 0xcd, 0x4b, 0x2e,
	0xf6, 0xee, 0xfb, 0xf8, 0xbd, 0xf7, 0x7e, 0xf3, 0xde, 0x9b, 0xa5, 0xc0, 0xd5, 0x06, 0x71, 0x6d,
	0xe2, 0xee, 0xb6, 0xc8, 0xc9, 0xee, 0xc9, 0x5b, 0x47, 0x88, 0x5a, 0x6f, 0x79, 0xcf, 0xc5, 0x4e,
	0x97, 0x50, 0x02, 0x21, 0xd7, 0x16, 0x3d, 0x89, 0xd0, 0xe6, 0xf2, 0xc2, 0xe3, 0xc8, 0x72, 0x51,
	0xe0, 0xd2, 0x20, 0xd8, 0xe1, 0x3e, 0xb9, 0xf5, 0x16, 0x69, 0x11, 0xf6, 0xb8, 0xeb, 0x3d, 0x09,
	0xe9, 0x16, 0xf7, 0x32, 0xb9, 0x42, 0xc0, 0x72, 0x95, 0xd2, 0x22, 0xa4, 0xd5, 0x46, 0xbb, 0xec,
	0xed, 0xa8, 0xf7, 0x60, 0x97, 0x62, 0x1b, 0xb9, 0xd4, 0xb2, 0x3b, 0xbe, 0xef, 0xb8, 0x81, 0xe5,
	0x9c, 0x09, 0x55, 0x7e, 0x5c, 0xd5, 0xec, 0x75, 0x2d, 0x8a, 0x89, 0x9f, 0xcc, 0x65, 0xcb, 0xc6,
	0x0e, 0xd9, 0x65, 0xff, 0x72, 0x91, 0xfa, 0x07, 0x09, 0xc0, 0xfb, 0x08, 0xb7, 0x8e, 0x29, 0x6a,
	0x1e, 0x12, 0x8a, 0x2a, 0x1d, 0xcf, 0x1e, 0x7e, 0x1b, 0x2c, 0x12, 0xf6, 0x94, 0x95, 0x0a, 0xd2,
	0xf6, 0xea, 0xcd, 0x7c, 0x71, 0xb2, 0xf6, 0xe2, 0xc8, 0xde, 0x10, 0xd6, 0xf0, 0x3e, 0x58, 0x7c,
	0xc8, 0xd0, 0xb2, 0xf1, 0x82, 0xb4, 0x9d, 0xd2, 0x7e, 0xf0, 0x74, 0xa8, 0xc4, 0xfe, 0x3d, 0x54,
	0xae, 0xb7, 0x30, 0x3d, 0xee, 0x1d, 0x15, 0x1b, 0xc4, 0x16, 0xe5, 0x8a, 0xff, 0xde, 0x74, 0x9b,
	0xef, 0xed, 0xd2, 0xb3, 0x0e, 0x72, 0x8b, 0x25, 0xd4, 0xb8, 0x18, 0x2a, 0x2b, 0x67, 0x96, 0xdd,
	0xde, 0x53, 0x39, 0x8a, 0x6a, 0x08, 0x38, 0xd5, 0x05, 0x99, 0x3a, 0x3a, 0xa5, 0xd5, 0x2e, 0xe9,
	0x10, 0xd7, 0x6a, 0xc3, 0x75, 0xb0, 0x40, 0x31, 0x6d, 0x23, 0x96, 0x5f, 0xca, 0xe0, 0x2f, 0xb0,
	0x00, 0xd2, 0x4d, 0xe4, 0x36, 0xba, 0x98, 0xe7, 0xce, 0x72, 0x30, 0xc2, 0xa2, 0xbd, 0xaf, 0x7d,
	0xfe, 0x44, 0x91, 0xfe, 0xfe, 0xe7, 0x37, 0x97, 0x6e, 0x13, 0x87, 0x22, 0x87, 0xf6, 0x3f, 0xfb,
	0x68, 0x67, 0x33, 0x94, 0x4a, 0x38, 0x88, 0xfa, 0x4f, 0x09, 0x2c, 0x95, 0x50, 0x87, 0xb8, 0x98,
	0xc2, 0xef, 0x80, 0x74, 0x47, 0xc8, 0x4d, 0xdc, 0x64, 0x61, 0x93, 0xda, 0xc6, 0xc5, 0x50, 0x81,
	0x3c, 0xe1, 0x90, 0x52, 0x35, 0x80, 0xff, 0x56, 0x6e, 0xc2, 0xab, 0x20, 0xd5, 0xe4, 0x18, 0xa4,
	0x2b, 0x32, 0x1a, 0x09, 0xe0, 0x31, 0x58, 0xb4, 0x6c, 0xd2, 0x73, 0x68, 0x36, 0x51, 0x48, 0x6c,
	0xa7, 0x6f, 0x6e, 0xf9, 0x44, 0x7b, 0x0d, 0x15, 0x30, 0x7d, 0x9b, 0x60, 0x47, 0xfb, 0x96, 0xc7,
	0xe5, 0x9f, 0x9e, 0x29, 0xdb, 0xaf, 0xc0, 0xa5, 0xe7, 0xe0, 0xfe, 0xf1, 0xb3, 0x8f, 0x76, 0x24,
	0x43, 0xe0, 0xef, 0x2d, 0x7f, 0xf8, 0x44, 0x89, 0x7d, 0xfe, 0x44, 0x89, 0xa9, 0x7f, 0x59, 0x02,
	0xcb, 0x01, 0x91, 0xdf, 0x9c, 0x56, 0xd7, 0xda, 0xf9, 0x50, 0x89, 0xe3, 0xe6, 0xc5, 0x50, 0x49,
	0xf1, 0xea, 0xc6, 0x8b, 0xba, 0x05, 0x96, 0x1a, 0x9c, 0x40, 0x56, 0x52, 0xfa, 0xe6, 0x7a, 0x91,
	0xf7, 0x5e, 0xd1, 0xef, 0xbd, 0xe2, 0xbe, 0x73, 0xa6, 0xa5, 0x43, 0x4c, 0x1b, 0xbe, 0x07, 0x3c,
	0x04, 0x8b, 0x2e, 0xb5, 0x68, 0xcf, 0xcd, 0x26, 0x58, 0x73, 0xa9, 0xd3, 0x9a, 0xcb, 0x4f, 0xb0,
	0xc6, 0x2c, 0xb5, 0xdc, 0xc5, 0x50, 0xd9, 0x18, 0x63, 0x9a, 0x83, 0xa8, 0x86, 0x40, 0x83, 0x3d,
	0x00, 0x1f, 0x60, 0xc7, 0x6a, 0x9b, 0xd4, 0x6a, 0xb7, 0xcf, 0xcc, 0x2e, 0x72, 0x7b, 0x6d, 0x9a,
	0x4d, 0xb2, 0xfc, 0x94, 0x69, 0x31, 0xea, 0x9e, 0x9d, 0xc1, 0xcc, 0xb4, 0xeb, 0x1e, 0xbb, 0x17,
	0x43, 0x65, 0x8b, 0x07, 0x99, 0x04, 0x52, 0x39, 0x9d, 0x32, 0xd3, 0x84, 0x3c, 0xe1, 0xcf, 0x41,
	0xda, 0xed, 0x1d, 0xd9, 0x98, 0x9a, 0xde, 0xa8, 0x66, 0x17, 0x58, 0xbc, 0xdc, 0x04, 0x1f, 0x75,
	0x7f, 0x8e, 0xb5, 0x6b, 0x22, 0x94, 0xe8, 0x9c, 0x90, 0xb3, 0xfa, 0xe8, 0x99, 0x22, 0xf1, 0x38,
	0x80, 0x8b, 0x3d, 0x2f, 0xe8, 0x00, 0x59, 0x74, 0x8c, 0x89, 0x9c, 0x26, 0x0f, 0xb3, 0x38, 0x33,
	0xcc, 0xb6, 0x08, 0xb3, 0xc9, 0xc3, 0x8c, 0x23, 0x84, 0x62, 0xad, 0x0a, 0x9d, 0xee, 0x34, 0x59,
	0xbc, 0x5f, 0x49, 0x60, 0x85, 0x12, 0x6a, 0xb5, 0x4d, 0xa1, 0xc8, 0x2e, 0xcd, 0x6a, 0xce, 0x9f,
	0x8a, 0x60, 0xeb, 0x3c, 0x58, 0xc4, 0x5b, 0x9d, 0xbf, 0x69, 0x33, 0x0c, 0xc0, 0x9f, 0xbd, 0xf7,
	0xc1, 0xe5, 0x13, 0x42, 0xb1, 0xd3, 0xf2, 0x8e, 0xbc, 0x2b, 0x78, 0x5e, 0x9e, 0x49, 0xc0, 0x57,
	0x45, 0x4e, 0x59, 0x9e, 0xd3, 0x04, 0x44, 0x88, 0x81, 0x4b, 0x5c, 0x59, 0xf3, 0x74, 0x8c, 0x82,
	0xf7, 0x80, 0x10, 0x8d, 0x18, 0x4f, 0xcd, 0x0c, 0xf8, 0x15, 0x11, 0x70, 0x23, 0x12, 0x70, 0x0a,
	0xe1, 0x2b, 0x5c, 0xe5, 0xf3, 0xfd, 0x06, 0xc8, 0x60, 0xd7, 0x44, 0xa7, 0x1d, 0xd4, 0xc4, 0x14,
	0x35, 0xb3, 0xa0, 0x20, 0x6d, 0x2f, 0x1b, 0x69, 0xec, 0xea, 0xbe, 0x68, 0x2f, 0xe9, 0xed, 0x2d,
	0xf5, 0x69, 0x1c, 0xa4, 0xc3, 0xad, 0xf7, 0x43, 0x90, 0x38, 0x43, 0x2e, 0xdf, 0x81, 0x5a, 0x71,
	0x8e, 0x5d, 0x5b, 0x76, 0xa8, 0xe1, 0xb9, 0xc2, 0xb7, 0xc1, 0x92, 0x75, 0xe4, 0x52, 0x0b, 0x8b,
	0x6d, 0x39, 0x37, 0x8a, 0xef, 0x0e, 0xbf, 0x0f, 0xe2, 0x0e, 0x61, 0x13, 0x3d, 0x3f, 0x48, 0xdc,
	0x21, 0xb0, 0x05, 0x32, 0x0e, 0x31, 0x1f, 0x62, 0x7a, 0x6c, 0x9e, 0x20, 0x4a, 0xd8, 0xdc, 0xa6,
	0x34, 0x7d, 0x3e, 0xa4, 0x8b, 0xa1, 0xb2, 0xc6, 0xc9, 0x0f, 0x63, 0xa9, 0x06, 0x70, 0xc8, 0x7d,
	0x4c, 0x8f, 0x0f, 0x11, 0x25, 0x82, 0xca, 0xff, 0x49, 0x20, 0xe9, 0x5d, 0x60, 0xf0, 0x7b, 0xd3,
	0x16, 0xe0, 0x6b, 0xd3, 0x17, 0xbb, 0x18, 0xcd, 0xd0, 0x22, 0x5c, 0x07, 0x0b, 0x27, 0x84, 0x22,
	0x7f, 0xb3, 0xf3, 0x17, 0xb8, 0x17, 0x5c, 0x9f, 0x89, 0x57, 0xb9, 0x3e, 0xb5, 0x78, 0x56, 0x0a,
	0xae, 0xd0, 0x9f, 0x80, 0x25, 0xfe, 0xe4, 0x66, 0x93, 0x6c, 0xea, 0xae, 0x4f, 0x73, 0x9e, 0xbc,
	0xb3, 0xb5, 0x94, 0x47, 0x15, 0xcf, 0xd0, 0x47, 0xd8, 0x5b, 0x7e, 0xec, 0x2f, 0xfd, 0xdf, 0x2c,
	0x80, 0x15, 0x31, 0x4f, 0x55, 0xab, 0x6b, 0xd9, 0x2e, 0xfc, 0xad, 0x04, 0xd2, 0x36, 0x76, 0x82,
	0x19, 0x97, 0x66, 0xcd, 0xb8, 0xe9, 0x05, 0x38, 0x1f, 0x2a, 0x57, 0x42, 0x5e, 0x37, 0x88, 0x8d,
	0x29, 0xb2, 0x3b, 0xf4, 0x6c, 0xc4, 0x58, 0x48, 0x3d, 0xd7, 0xe8, 0x1b, 0xc0, 0xc6, 0x8e, 0x3f,
	0xf3, 0xbf, 0x96, 0x00, 0xb4, 0xad, 0x53, 0x1f, 0xc8, 0xec, 0xa0, 0x2e, 0x26, 0x4d, 0x71, 0xdb,
	0x6c, 0x4d, 0x0c, 0x61, 0x49, 0x7c, 0xe9, 0xf0, 0x86, 0x39, 0x1f, 0x2a, 0x57, 0x27, 0x9d, 0x23,
	0xb9, 0x8a, 0x3d, 0x3f, 0x69, 0xa5, 0x3e, 0x7e, 0xa6, 0x48, 0x86, 0x6c, 0x5b, 0xa7, 0x3e, 0x5d,
	0x4c, 0x0c, 0xff, 0x26, 0x01, 0x56, 0x78, 0x30, 0xa6, 0x01, 0x71, 0x33, 0x6f, 0x6e, 0x57, 0xe4,
	0xa4, 0x4c, 0xf5, 0x8f, 0xa4, 0x75, 0x75, 0x44, 0xe1, 0x84, 0xe1, 0x7c, 0x64, 0xae, 0xd9, 0xd8,
	0x09, 0xf6, 0x87, 0xcf, 0xea, 0x23, 0x09, 0x6c, 0x79, 0xd8, 0xd8, 0xc1, 0x14, 0x8f, 0x36, 0xb4,
	0xc9, 0xc8, 0x13, 0x23, 0x77, 0x6f, 0xbe, 0x6f, 0xb6, 0xf3, 0xa1, 0x72, 0xed, 0xa5, 0x90, 0xa3,
	0xda, 0x8c, 0x0d, 0x1b, 0x3b, 0x65, 0x6e, 0x23, 0xb2, 0x31, 0x3c, 0x0b, 0xf5, 0x71, 0x02, 0x64,
	0x0e, 0xd9, 0x3a, 0x14, 0x7d, 0xf9, 0x4b, 0x20, 0xd6, 0xa3, 0x7f, 0xe6, 0xd2, 0xac, 0x33, 0xbf,
	0x25, 0xf8, 0xdd, 0x8c, 0xf8, 0x45, 0x78, 0x5d, 0x8f, 0xac, 0xe4, 0xf0, 0x49, 0x67, 0xb8, 0x4c,
	0x9c, 0xf2, 0x03, 0xb0, 0x19, 0x0c, 0x7c, 0xc4, 0xd8, 0xcd, 0xc6, 0xd9, 0x31, 0x6f, 0x7f, 0xd1,
	0xc7, 0xca, 0x61, 0x08, 0x4a, 0x4b, 0x7a, 0x59, 0x19, 0x57, 0x3a, 0x53, 0x74, 0x2e, 0xfc, 0x9d,
	0x04, 0x36, 0x47, 0x07, 0x1c, 0xad, 0x37, 0x31, 0xab, 0xde, 0x8a, 0xa8, 0xf7, 0x8d, 0x97, 0x20,
	0x44, 0x2a, 0xcf, 0xf3, 0xca, 0x5f, 0x62, 0xca, 0x39, 0xb8, 0x12, 0x68, 0xc3, 0x59, 0xaa, 0xff,
	0x4a, 0x8a, 0xeb, 0x46, 0x9c, 0xcc, 0xbb, 0x60, 0xf1, 0xfd, 0x1e, 0xe9, 0xf6, 0x6c, 0x76, 0x24,
	0x19, 0x4d, 0x9b, 0xbb, 0x53, 0x64, 0xee, 0x1f, 0x6a, 0x0b, 0x81, 0x08, 0x1b, 0x20, 0x45, 0x8f,
	0xbb, 0xc8, 0x3d, 0x26, 0x6d, 0x3e, 0xe5, 0x99, 0xb9, 0x76, 0x3f, 0x87, 0x5f, 0x0b, 0x20, 0x42,
	0x11, 0x46, 0xb8, 0xb0, 0x2f, 0x81, 0x55, 0xef, 0x42, 0x30, 0x47, 0xa1, 0x12, 0x2c, 0x54, 0x63,
	0xee, 0x50, 0xd9, 0x28, 0x4e, 0x84, 0xf2, 0x2b, 0xa2, 0xd9, 0x22, 0x16, 0xaa, 0xb1, 0xe2, 0x09,
	0xea, 0x41, 0x32, 0x1f, 0x48, 0x60, 0x6d, 0x74, 0x2a, 0xa3, 0x8c, 0x92, 0x2c, 0xa3, 0xca, 0xdc,
	0x19, 0xbd, 0x3e, 0x05, 0x2c, 0x44, 0x03, 0x0c, 0xd4, 0xa3, 0x14, 0x1e, 0x02, 0x79, 0xe4, 0x24,
	0x8e, 0x76, 0x81, 0x85, 0xbf, 0x3b, 0x77, 0xf8, 0xdc, 0x38, 0x52, 0x28, 0xf6, 0xa5, 0x40, 0xf7,
	0x33, 0xa6, 0x52, 0xff, 0x2a, 0x81, 0xf5, 0x69, 0x43, 0x03, 0xaf, 0x81, 0x95, 0x60, 0xfe, 0x3c,
	0x74, 0xf1, 0xfb, 0x2e, 0xe3, 0x0b, 0xeb, 0x67, 0x1d, 0x34, 0xb9, 0x21, 0xe2, 0x5f, 0xde, 0x86,
	0xd8, 0xf9, 0xaf, 0x04, 0x40, 0xe8, 0x97, 0xf2, 0x0d, 0xb0, 0x79, 0x58, 0xa9, 0xeb, 0x66, 0xa5,
	0x5a, 0x2f, 0x57, 0x0e, 0xcc, 0x7b, 0x07, 0xb5, 0xaa, 0x7e, 0xbb, 0x7c, 0xa7, 0xac, 0x97, 0xe4,
	0x58, 0xee, 0x52, 0x7f, 0x50, 0x48, 0x73, 0x43, 0xdd, 0x0b, 0x03, 0x55, 0x70, 0x29, 0x6c, 0xfd,
	0x8e, 0x5e, 0x93, 0xa5, 0xdc, 0x4a, 0x7f, 0x50, 0x48, 0x71, 0xab, 0x77, 0x90, 0x0b, 0x77, 0xc0,
	0x5a, 0xd8, 0x66, 0x5f, 0xab, 0xd5, 0xf7, 0xcb, 0x07, 0x72, 0x3c, 0x77, 0xb9, 0x3f, 0x28, 0xac,
	0x70, 0xbb, 0x7d, 0xf1, 0xd1, 0x55, 0x00, 0xab, 0x61, 0xdb, 0x83, 0x8a, 0x9c, 0xc8, 0x65, 0xfa,
	0x83, 0xc2, 0x32, 0x37, 0x3b, 0x20, 0xf0, 0x26, 0xc8, 0x46, 0x2d, 0xcc, 0xfb, 0xe5, 0xfa, 0xdb,
	0xe6, 0xa1, 0x5e, 0xaf, 0xc8, 0xc9, 0xdc, 0x7a, 0x7f, 0x50, 0x90, 0x7d, 0x5b, 0xff, 0x0b, 0x29,
	0x97, 0xfc, 0xf0, 0xf7, 0xf9, 0xd8, 0xce, 0x3f, 0xe2, 0x60, 0x35, 0xfa, 0x2b, 0x0c, 0x16, 0xc1,
	0x6b, 0x55, 0xa3, 0x52, 0xad, 0xd4, 0xf6, 0xef, 0x9a, 0xb5, 0xfa, 0x7e, 0xfd, 0x5e, 0x6d, 0xac,
	0x60, 0x56, 0x0a, 0x37, 0x3e, 0xc0, 0x6d, 0x78, 0x0b, 0xe4, 0xc7, 0xed, 0x4b, 0x7a, 0xb5, 0x52,
	0x2b, 0xd7, 0xcd, 0xaa, 0x6e, 0x94, 0x2b, 0x25, 0x59, 0xca, 0x6d, 0xf6, 0x07, 0x85, 0x35, 0xee,
	0x12, 0xbd, 0x70, 0xbf, 0x0b, 0x5e, 0x1f, 0x77, 0x3e, 0xac, 0xd4, 0xcb, 0x07, 0x3f, 0xf2, 0x7d,
	0xe3, 0xb9, 0x8d, 0xfe, 0xa0, 0x00, 0xb9, 0x6f, 0xa4, 0x8b, 0x6e, 0x80, 0x8d, 0x71, 0xd7, 0xea,
	0x7e, 0xad, 0xa6, 0x97, 0xe4, 0x44, 0x4e, 0xee, 0x0f, 0x0a, 0x19, 0xee, 0x53, 0xb5, 0x5c, 0x17,
	0x35, 0xe1, 0xd7, 0x41, 0x76, 0xdc, 0xda, 0xd0, 0x7f, 0xac, 0xdf, 0xae, 0xeb, 0x25, 0x39, 0x99,
	0x83, 0xfd, 0x41, 0x61, 0x95, 0xdb, 0x1b, 0xe8, 0x17, 0xa8, 0x41, 0xd1, 0x54, 0xfc, 0x3b, 0xfb,
	0xe5, 0xbb, 0x7a, 0x49, 0x5e, 0x08, 0xe3, 0xdf, 0xb1, 0x70, 0x1b, 0x35, 0x39, 0x9d, 0xda, 0xc1,
	0xd3, 0x4f, 0xf3, 0xb1, 0x4f, 0x3e, 0xcd, 0xc7, 0x3e, 0x78, 0x9e, 0x8f, 0x3d, 0x7d, 0x9e, 0x97,
	0x3e, 0x7e, 0x9e, 0x97, 0xfe, 0xf3, 0x3c, 0x2f, 0x3d, 0x7a, 0x91, 0x8f, 0x7d, 0xfc, 0x22, 0x1f,
	0xfb, 0xe4, 0x45, 0x3e, 0xf6, 0xee, 0x17, 0xdf, 0xef, 0xa7, 0xec, 0x2f, 0x53, 0x6c, 0xea, 0x8e,
	0x16, 0x59, 0x97, 0x7f, 0xe3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x3c, 0x66, 0x06, 0xb4,
	0x12, 0x00, 0x00,
>>>>>>> 1cfa69278 (fix: added expedited quorum param v0.47 (#457))
}

func (this *TextProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextProposal)
	if !ok {
		that2, ok := that.(TextProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *Proposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Proposal)
	if !ok {
		that2, ok := that.(Proposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProposalId != that1.ProposalId {
		return false
	}
	if !this.Content.Equal(that1.Content) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.FinalTallyResult.Equal(&that1.FinalTallyResult) {
		return false
	}
	if !this.SubmitTime.Equal(that1.SubmitTime) {
		return false
	}
	if !this.DepositEndTime.Equal(that1.DepositEndTime) {
		return false
	}
	if len(this.TotalDeposit) != len(that1.TotalDeposit) {
		return false
	}
	for i := range this.TotalDeposit {
		if !this.TotalDeposit[i].Equal(&that1.TotalDeposit[i]) {
			return false
		}
	}
	if !this.VotingStartTime.Equal(that1.VotingStartTime) {
		return false
	}
	if !this.VotingEndTime.Equal(that1.VotingEndTime) {
		return false
	}
	if this.IsExpedited != that1.IsExpedited {
		return false
	}
	return true
}
func (this *TallyResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TallyResult)
	if !ok {
		that2, ok := that.(TallyResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Yes.Equal(that1.Yes) {
		return false
	}
	if !this.Abstain.Equal(that1.Abstain) {
		return false
	}
	if !this.No.Equal(that1.No) {
		return false
	}
	if !this.NoWithVeto.Equal(that1.NoWithVeto) {
		return false
	}
	return true
}
func (m *WeightedVoteOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeightedVoteOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeightedVoteOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Option != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TextProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Deposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsExpedited {
		i--
		if m.IsExpedited {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VotingEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGov(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VotingStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingStartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintGov(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	if len(m.TotalDeposit) > 0 {
		for iNdEx := len(m.TotalDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.DepositEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.DepositEndTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintGov(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x32
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.SubmitTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmitTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintGov(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.FinalTallyResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Status != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGov(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TallyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TallyResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TallyResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NoWithVeto.Size()
		i -= size
		if _, err := m.NoWithVeto.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.No.Size()
		i -= size
		if _, err := m.No.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Abstain.Size()
		i -= size
		if _, err := m.Abstain.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Yes.Size()
		i -= size
		if _, err := m.Yes.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Option != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DepositParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinInitialDepositRatio.Size()
		i -= size
		if _, err := m.MinInitialDepositRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.MinExpeditedDeposit) > 0 {
		for iNdEx := len(m.MinExpeditedDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinExpeditedDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	n7, err7 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MaxDepositPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxDepositPeriod):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintGov(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x12
	if len(m.MinDeposit) > 0 {
		for iNdEx := len(m.MinDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VotingParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VotingParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VotingParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n8, err8 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.ExpeditedVotingPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.ExpeditedVotingPeriod):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintGov(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x1a
	if len(m.ProposalVotingPeriods) > 0 {
		for iNdEx := len(m.ProposalVotingPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProposalVotingPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n9, err9 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.VotingPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.VotingPeriod):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintGov(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TallyParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TallyParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TallyParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExpeditedQuorum.Size()
		i -= size
		if _, err := m.ExpeditedQuorum.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.ExpeditedThreshold.Size()
		i -= size
		if _, err := m.ExpeditedThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.VetoThreshold.Size()
		i -= size
		if _, err := m.VetoThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Threshold.Size()
		i -= size
		if _, err := m.Threshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Quorum.Size()
		i -= size
		if _, err := m.Quorum.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProposalVotingPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalVotingPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalVotingPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n10, err10 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.VotingPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.VotingPeriod):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintGov(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x12
	if len(m.ProposalType) > 0 {
		i -= len(m.ProposalType)
		copy(dAtA[i:], m.ProposalType)
		i = encodeVarintGov(dAtA, i, uint64(len(m.ProposalType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGov(dAtA []byte, offset int, v uint64) int {
	offset -= sovGov(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WeightedVoteOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Option != 0 {
		n += 1 + sovGov(uint64(m.Option))
	}
	l = m.Weight.Size()
	n += 1 + l + sovGov(uint64(l))
	return n
}

func (m *TextProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	return n
}

func (m *Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovGov(uint64(m.ProposalId))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	return n
}

func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovGov(uint64(m.ProposalId))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovGov(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovGov(uint64(m.Status))
	}
	l = m.FinalTallyResult.Size()
	n += 1 + l + sovGov(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmitTime)
	n += 1 + l + sovGov(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.DepositEndTime)
	n += 1 + l + sovGov(uint64(l))
	if len(m.TotalDeposit) > 0 {
		for _, e := range m.TotalDeposit {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingStartTime)
	n += 1 + l + sovGov(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime)
	n += 1 + l + sovGov(uint64(l))
	if m.IsExpedited {
		n += 2
	}
	return n
}

func (m *TallyResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Yes.Size()
	n += 1 + l + sovGov(uint64(l))
	l = m.Abstain.Size()
	n += 1 + l + sovGov(uint64(l))
	l = m.No.Size()
	n += 1 + l + sovGov(uint64(l))
	l = m.NoWithVeto.Size()
	n += 1 + l + sovGov(uint64(l))
	return n
}

func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovGov(uint64(m.ProposalId))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if m.Option != 0 {
		n += 1 + sovGov(uint64(m.Option))
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	return n
}

func (m *DepositParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MinDeposit) > 0 {
		for _, e := range m.MinDeposit {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxDepositPeriod)
	n += 1 + l + sovGov(uint64(l))
	if len(m.MinExpeditedDeposit) > 0 {
		for _, e := range m.MinExpeditedDeposit {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	l = m.MinInitialDepositRatio.Size()
	n += 1 + l + sovGov(uint64(l))
	return n
}

func (m *VotingParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.VotingPeriod)
	n += 1 + l + sovGov(uint64(l))
	if len(m.ProposalVotingPeriods) > 0 {
		for _, e := range m.ProposalVotingPeriods {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.ExpeditedVotingPeriod)
	n += 1 + l + sovGov(uint64(l))
	return n
}

func (m *TallyParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Quorum.Size()
	n += 1 + l + sovGov(uint64(l))
	l = m.Threshold.Size()
	n += 1 + l + sovGov(uint64(l))
	l = m.VetoThreshold.Size()
	n += 1 + l + sovGov(uint64(l))
	l = m.ExpeditedThreshold.Size()
	n += 1 + l + sovGov(uint64(l))
	l = m.ExpeditedQuorum.Size()
	n += 1 + l + sovGov(uint64(l))
	return n
}

func (m *ProposalVotingPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalType)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.VotingPeriod)
	n += 1 + l + sovGov(uint64(l))
	return n
}

func sovGov(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGov(x uint64) (n int) {
	return sovGov(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WeightedVoteOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeightedVoteOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeightedVoteOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &types1.Any{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProposalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalTallyResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalTallyResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.SubmitTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.DepositEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDeposit = append(m.TotalDeposit, types.Coin{})
			if err := m.TotalDeposit[len(m.TotalDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VotingStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VotingEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExpedited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExpedited = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TallyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TallyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TallyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Yes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abstain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Abstain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field No", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.No.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWithVeto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NoWithVeto.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, WeightedVoteOption{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDeposit = append(m.MinDeposit, types.Coin{})
			if err := m.MinDeposit[len(m.MinDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDepositPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MaxDepositPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinExpeditedDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinExpeditedDeposit = append(m.MinExpeditedDeposit, types.Coin{})
			if err := m.MinExpeditedDeposit[len(m.MinExpeditedDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInitialDepositRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinInitialDepositRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VotingParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VotingParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VotingParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.VotingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalVotingPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalVotingPeriods = append(m.ProposalVotingPeriods, ProposalVotingPeriod{})
			if err := m.ProposalVotingPeriods[len(m.ProposalVotingPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpeditedVotingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.ExpeditedVotingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TallyParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TallyParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TallyParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quorum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quorum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Threshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VetoThreshold", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VetoThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpeditedThreshold", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpeditedThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpeditedQuorum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpeditedQuorum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalVotingPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalVotingPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalVotingPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.VotingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGov(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGov
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGov
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGov
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGov
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGov        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGov          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGov = fmt.Errorf("proto: unexpected end of group")
)
